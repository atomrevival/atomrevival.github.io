{"mappings":";;;;;;;;AAAA;;;ACAA;;ACAA;AAQO,MAAM,yCAAW;IACtB,AAAO,KAAK,GAAQ,EAAE,CAAC;IACvB,AAAO,KAAK,GAAyB,EAAE,CAAC;IAExC,UAAU;IACV,CAAC,KAAK,GAAG,IAAI,CAAA,GAAA,2CAAK,CAAA,EAAE,CAAC;IAErB,aAAa,GAAG,IAAM;QACpB,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,KAAK,AAAC;QAEjC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,QAAE,IAAI,CAAA,EAAE,GAAK;YAC/B,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;SAC5B,CAAC,CAAC;QAEH,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,QAAE,IAAI,CAAA,EAAE,GAAK,IAAI,CAAC,CAAC;KAC3D,CAAC;CACH;;;ADpBM,MAAM,yCAAG,GAAG,IAAM;IACvB,MAAM,aAAa,GAAG,IAAI,CAAA,GAAA,yCAAW,CAAA,EAAE,AAAC;IACxC,aAAa,CAAC,KAAK,GAAG;QACpB;YACE,IAAI,EAAE,KAAK;YACX,SAAS,EAAE,IAAI;SAChB;QACD;YACE,IAAI,EAAE,GAAG;YACT,SAAS,EAAE,IAAI;SAChB;KACF,CAAC;IAEF,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAEjC,qBAAO;kBAAE,MAAI;MAAG,CAAC;CAClB,AAAC;;;ADhBF,MAAM,0BAAI,GAAG,QAAQ,CAAC,cAAc,CAAC,MAAM,CAAC,AAAC;AAC7C,IAAI,0BAAI,EACN,CAAA,GAAA,gCAAU,CAAA,CAAC,0BAAI,CAAC,CAAC,MAAM,eAAC,gCAAC,CAAA,GAAA,yCAAG,CAAA,KAAG,CAAC,CAAC","sources":["src/index.tsx","src/App/App.tsx","../src/index.ts"],"sourcesContent":["import React from \"react\";\nimport { createRoot } from \"react-dom/client\";\nimport { App } from \"./App/App\";\n\nconst root = document.getElementById(\"root\");\nif (root) {\n  createRoot(root).render(<App />);\n}\n","import React from \"react\";\n\nimport { GraphRouter } from \"../../../src/index\";\n\nexport const App = () => {\n  const featureRouter = new GraphRouter();\n  featureRouter.graph = [\n    {\n      path: \"1/1\",\n      component: null,\n    },\n    {\n      path: \"3\",\n      component: null,\n    },\n  ];\n\n  console.log(featureRouter.paths);\n\n  return <>Test</>;\n};\n","import Graph from \"graphology\";\nimport React from \"react\";\n\nexport interface RouterNode {\n  path: string;\n  component: React.ReactNode;\n}\n\nexport class GraphRouter<T extends RouterNode = RouterNode> {\n  public graph: T[] = [];\n  public paths: RouterNode[\"path\"][] = [];\n\n  // Private\n  #graph = new Graph();\n\n  generateGraph = () => {\n    const currentGraph = this.#graph;\n\n    this.graph.forEach(({ path }) => {\n      currentGraph.addNode(path);\n    });\n\n    this.paths = currentGraph.mapNodes((_, { path }) => path);\n  };\n}\n"],"names":[],"version":3,"file":"main.js.map"}